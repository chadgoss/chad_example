# bundle workflow

name: bundle-workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Manual input test: Reason for running this deployment?'
        default: 'pipeline testing'
        required: true

      pick_runner:
        description: 'runner to use, dev or prod'
        default: 'ubuntu-latest'
        required: true

  push:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set_runner:
    runs-on: [ ubuntu-latest ]
    outputs:
      runner: ${{ steps.set_runner.outputs.runner }}
    steps:
    - id: set_runner
      run: |
        if [[ "Runner: ${{ github.event.inputs.pick_runner }}" == "Runner: " ]]; then
          echo "::set-output name=runner::ubuntu-latest"
        else
          echo "::set-output name=runner::${{ github.event.inputs.pick_runner }}"
        fi

  clean_workspace:
    needs: set_runner
    runs-on: ${{needs.set_runner.outputs.runner}}

    steps:
    - name: Clean workspace
      run: |
        echo "Cleaning up run"
        rm -rf "${{ github.workspace }}"

  deploy_bundle:
    needs: clean_workspace
    runs-on: ${{needs.set_runner.outputs.runner}}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: 'true'
        clean: 'true'
        persist-credentials: 'false'

    - name: python version
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: configure AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1

    - name: Create and start virtual environment
      run: |
        python3 -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: node version
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: go version
      uses: actions/setup-go@v2
      with:
        go-version: '^1.17.1'
    
    - name: terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '^v1.0.10'

    - name: build_viasatio
      id: bldvio
      working-directory: ./terraform/providers/viasatio
      run: |
        make

    - name: build_cxagent
      id: bldc
      working-directory: ./terraform/providers/cxagent
      run: |
        make

    - name: CX provider secrets config
      id: cxc
      run: |
        echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'>/tmp/gcp_key.json

    - name: Terraform Format
      id: fmt
      working-directory: "./terraform/${{needs.set_runner.outputs.runner}}"
      run: |
        terraform fmt -check

    - name: Terraform Init
      id: init
      working-directory: "./terraform/${{needs.set_runner.outputs.runner}}"
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      working-directory: "./terraform/${{needs.set_runner.outputs.runner}}" 
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: "./terraform/${{needs.set_runner.outputs.runner}}" 
      env:
        TF_LOG: DEBUG
        AWS_DEFAULT_REGION: 'us-east-1'
        ARTIFACTORY_API_KEY: '${{ secrets.ARTIFACTORY_API_KEY }}'
        VIASATIO_USERNAME: '${{ secrets.VIASATIO_USERNAME}}'
        VIASATIO_PASSWORD: '${{ secrets.VIASATIO_PASSWORD}}'
        # todo eventually need prod creds too
        GOOGLE_APPLICATION_CREDENTIALS: '/tmp/gcp_key.json'

      #if: github.event_name == 'pull_request'
      run: |
        terraform plan -no-color
      continue-on-error: false

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    #- name: Terraform Apply
      #working-directory: "./terraform/${{needs.set_runner.outputs.runner}}" 
      #env:
        #TF_LOG: DEBUG
        #ARTIFACTORY_API_KEY: '${{ secrets.ARTIFACTORY_API_KEY }}'
        #VIASATIO_USERNAME: '${{ secrets.VIASATIO_USERNAME}}'
        #VIASATIO_PASSWORD: '${{ secrets.VIASATIO_PASSWORD}}'
         # todo eventually need prod creds too
        #GOOGLE_APPLICATION_CREDENTIALS: '/tmp/gcp_key.json'

      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #run: terraform apply -auto-approve
